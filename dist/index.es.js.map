{"version":3,"file":"index.es.js","sources":["../src/row.js","../src/index.js"],"sourcesContent":["import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { areEqual } from 'react-window'\n\nconst Row = memo(({ data, index, style }) => {\n  const { rows, images, renderItem } = data\n  const itemsBelowIndex = rows\n    .filter((_, i) => i < index)\n    .map(row => row.contents.length)\n    .reduce((a, b) => a + b, 0)\n  return (\n    <div\n      key={index + rows[index].contents.length}\n      style={{\n        ...style,\n        height: rows[index].rowHeight\n      }}\n    >\n      {\n        rows[index].contents.map((content, i) => {\n          const id = images.allIds[(itemsBelowIndex + i)]\n          const image = images.byId[id]\n          return renderItem(content, image)\n        })\n      }\n    </div>\n  )\n}, areEqual)\n\nRow.propTypes = {\n  data: PropTypes.object,\n  index: PropTypes.number,\n  style: PropTypes.object\n}\n\nexport default Row\n","import React, { Component, createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { VariableSizeList } from 'react-window'\nimport Row from './row'\n// import styles from './styles.css'\n\nlet minimumRowHeight, maximumRowHeight\nexport default class DreamGrid extends Component {\n  static propTypes = {\n    minimumRowHeight: PropTypes.number,\n    maximumRowHeight: PropTypes.number,\n    size: PropTypes.objectOf(PropTypes.number),\n    images: PropTypes.object,\n    renderItem: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props)\n    minimumRowHeight = props.minimumRowHeight\n    maximumRowHeight = props.maximumRowHeight\n    this.list = createRef()\n  }\n  //\n  // componentDidMount() {\n  //   console.log(this.list);\n  //     this.list.scrollToItem(this.rows.length+1);\n  // }\n\n  componentDidUpdate(prevProps) {\n    const { height, width } = this.props.size\n    if (prevProps.size.height !== height || prevProps.size.width !== width) {\n      this.list.resetAfterIndex(0, true)\n    }\n  }\n\n  dimension = (x, y) => {\n    return { x, y }\n  }\n\n  scaleDimension = (dimension, scale) => {\n    return {\n      dimension: dimension,\n      scale: scale\n    }\n  }\n\n  row = (unscaledContents, scaleDueToHeight) => {\n    const width = this.props.size.width\n    const scaledContents = unscaledContents.map(unscaledDimension => {\n      const factor = this.factorToFitInMinimumRowHeight(unscaledDimension) * scaleDueToHeight;\n      return this.scaleDimension(unscaledDimension, factor)\n    })\n\n    const remainingWhitespace = width - scaledContents\n      .map(scaledContent => scaledContent.dimension.x * scaledContent.scale)\n      .reduce((cur, prev) => { return cur + prev }, 0)\n\n    return {\n      contents: scaledContents,\n      rowHeight: minimumRowHeight * scaleDueToHeight,\n      horizontalWhitespace: remainingWhitespace\n    }\n  }\n\n  makeNextRow = (remainingDimensions) => {\n    const width = this.props.size.width\n    let remainingRowWidth = width\n    let accumulatedRowDimensions = []\n    while (remainingDimensions.length > 0 && remainingRowWidth > this.widthAtMinimumRowHeight(remainingDimensions[0])) {\n      remainingRowWidth -= this.widthAtMinimumRowHeight(remainingDimensions[0]);\n      accumulatedRowDimensions.push(remainingDimensions.shift())\n    }\n\n    const widthsAtMinimumHeight = accumulatedRowDimensions.map(d => this.widthAtMinimumRowHeight(d));\n    const totalWidthAtMinimumHeight = widthsAtMinimumHeight.reduce((a, b) => { return a + b; }, 0);\n    const widthScaleFactor = Math.min(width / totalWidthAtMinimumHeight, maximumRowHeight / minimumRowHeight);\n    return {\n      next: this.row(accumulatedRowDimensions, widthScaleFactor),\n      remaining: remainingDimensions\n    }\n  }\n\n  makeRows = (accumulatedRows, dimensions) => {\n    const { next, remaining } = this.makeNextRow(dimensions)\n    accumulatedRows.push(next)\n    if (remaining.length > 0) {\n      accumulatedRows.concat(this.makeRows(accumulatedRows, remaining))\n    }\n    return accumulatedRows\n  }\n\n  widthAtMinimumRowHeight = (dimension) => {\n    return this.factorToFitInMinimumRowHeight(dimension) * dimension.x\n  }\n\n  factorToFitInMinimumRowHeight = (dimension) => {\n    return minimumRowHeight / dimension.y\n  }\n\n  getImageDimensions = (id) => {\n    const { images } = this.props\n    const image = images.byId[id]\n    const { width, height } = image\n    switch (image.image_orientation) {\n      case 'LeftBottom':\n        return {\n          x: height,\n          y: width\n        }\n      default:\n        return {\n          x: width,\n          y: height\n        }\n    }\n  }\n\n  makeDimensions = () => {\n    const { images } = this.props\n    return images.allIds.filter((id) => {\n      const { width, height } = images.byId[id]\n      return width && height\n    }).map((id) => {\n      const { x, y } = this.getImageDimensions(id)\n      return this.dimension(x, y)\n    })\n  }\n\n  getItemSize = index => {\n    return this.rows[index].rowHeight\n  };\n\n  render() {\n    const { images, size, renderItem } = this.props\n    const { height, width } = size\n    const imageDimensions = this.makeDimensions()\n    this.rows = this.makeRows([], imageDimensions)\n    const itemData = { rows: this.rows, images, renderItem }\n    return (\n      <VariableSizeList\n        height={height}\n        width={width}\n        itemData={itemData}\n        itemSize={this.getItemSize}\n        itemCount={this.rows.length}\n        ref={(node) => { this.list = node }}\n      >\n        {Row}\n      </VariableSizeList>\n    )\n  }\n}\n"],"names":["Row","memo","data","index","style","rows","images","renderItem","itemsBelowIndex","filter","_","i","map","row","contents","length","reduce","a","b","rowHeight","content","id","allIds","image","byId","areEqual","propTypes","PropTypes","object","number","minimumRowHeight","maximumRowHeight","DreamGrid","props","dimension","x","y","scaleDimension","scale","unscaledContents","scaleDueToHeight","width","size","scaledContents","factor","factorToFitInMinimumRowHeight","unscaledDimension","remainingWhitespace","scaledContent","cur","prev","makeNextRow","remainingDimensions","remainingRowWidth","accumulatedRowDimensions","widthAtMinimumRowHeight","push","shift","widthsAtMinimumHeight","d","totalWidthAtMinimumHeight","widthScaleFactor","Math","min","makeRows","accumulatedRows","dimensions","next","remaining","concat","getImageDimensions","height","image_orientation","makeDimensions","getItemSize","list","createRef","prevProps","resetAfterIndex","imageDimensions","itemData","node","Component","objectOf","func"],"mappings":"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"}