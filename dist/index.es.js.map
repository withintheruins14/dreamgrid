{"version":3,"file":"index.es.js","sources":["../src/row.js","../src/Grid.js"],"sourcesContent":["import React, { memo } from 'react'\nimport { areEqual } from 'react-window'\n\nconst Row = memo(({ data, index, style }) => {\n  const { rows, images, renderItem } = data\n  const itemsBelowIndex = rows\n    .filter((_, i) => i < index)\n    .map(row => row.contents.length)\n    .reduce((a, b) => a + b, 0)\n  return (\n    <div\n      key={index + rows[index].contents.length}\n      style={{\n        ...style,\n        height: rows[index].rowHeight\n      }}\n    >\n      {\n        rows[index].contents.map((content, i) => {\n          const image = images[itemsBelowIndex + i]\n          return renderItem(content, image)\n        })\n      }\n    </div>\n  )\n}, areEqual);\n\nexport default Row\n","import React, { Component, createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { VariableSizeList } from 'react-window'\nimport Row from './row'\nimport { dimension, scaleDimension } from './utils';\n\nlet minimumRowHeight, maximumRowHeight\nexport default class DreamGrid extends Component {\n  static propTypes = {\n    minimumRowHeight: PropTypes.number,\n    maximumRowHeight: PropTypes.number,\n    size: PropTypes.objectOf(PropTypes.number),\n    images: PropTypes.object,\n    renderItem: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props)\n    minimumRowHeight = props.minimumRowHeight\n    maximumRowHeight = props.maximumRowHeight\n    this.list = createRef()\n  }\n\n  componentDidUpdate(prevProps) {\n    const { height, width } = this.props.size\n    if (prevProps.size.height !== height || prevProps.size.width !== width) {\n      this.list.resetAfterIndex(0, true)\n    }\n  }\n\n  row = (unscaledContents, scaleDueToHeight) => {\n    const width = this.props.size.width\n    const scaledContents = unscaledContents.map(unscaledDimension => {\n      const factor = this.factorToFitInMinimumRowHeight(unscaledDimension) * scaleDueToHeight\n      return this.scaleDimension(unscaledDimension, factor)\n    })\n\n    const remainingWhitespace = width - scaledContents\n      .map(scaledContent => scaledContent.dimension.x * scaledContent.scale)\n      .reduce((cur, prev) => { return cur + prev }, 0)\n\n    return {\n      contents: scaledContents,\n      rowHeight: minimumRowHeight * scaleDueToHeight,\n      horizontalWhitespace: remainingWhitespace\n    }\n  }\n\n  makeNextRow = (remainingDimensions) => {\n    const width = this.props.size.width\n    let remainingRowWidth = width\n    let accumulatedRowDimensions = []\n    while (remainingDimensions.length > 0 && remainingRowWidth > this.widthAtMinimumRowHeight(remainingDimensions[0])) {\n      remainingRowWidth -= this.widthAtMinimumRowHeight(remainingDimensions[0])\n      accumulatedRowDimensions.push(remainingDimensions.shift())\n    }\n\n    const widthsAtMinimumHeight = accumulatedRowDimensions.map(d => this.widthAtMinimumRowHeight(d))\n    const totalWidthAtMinimumHeight = widthsAtMinimumHeight.reduce((a, b) => { return a + b }, 0)\n    const widthScaleFactor = Math.min(width / totalWidthAtMinimumHeight, maximumRowHeight / minimumRowHeight)\n    return {\n      next: this.row(accumulatedRowDimensions, widthScaleFactor),\n      remaining: remainingDimensions\n    }\n  }\n\n  makeRows = (accumulatedRows, dimensions) => {\n    const { next, remaining } = this.makeNextRow(dimensions)\n    accumulatedRows.push(next)\n    if (remaining.length > 0) {\n      accumulatedRows.concat(this.makeRows(accumulatedRows, remaining))\n    }\n    return accumulatedRows\n  }\n\n  widthAtMinimumRowHeight = (dimension) => {\n    return this.factorToFitInMinimumRowHeight(dimension) * dimension.x\n  }\n\n  factorToFitInMinimumRowHeight = (dimension) => {\n    return minimumRowHeight / dimension.y\n  }\n\n  getImageDimensions = (image) => {\n    const { width, height } = image\n    switch (image.image_orientation) {\n      case 'LeftBottom':\n        return {\n          x: height,\n          y: width\n        }\n      default:\n        return {\n          x: width,\n          y: height\n        }\n    }\n  }\n\n  makeDimensions = () => {\n    const { images } = this.props\n    return images.filter(({ width, height }) => {\n      return width && height\n    }).map((image) => {\n      const { x, y } = this.getImageDimensions(image)\n      return this.dimension(x, y)\n    })\n  }\n\n  getItemSize = index => {\n    return this.rows[index].rowHeight\n  };\n\n  render() {\n    const { images, size, renderItem } = this.props\n    const { height, width } = size\n    const imageDimensions = this.makeDimensions()\n    this.rows = this.makeRows([], imageDimensions)\n    const itemData = { rows: this.rows, images, renderItem }\n    return (\n      <VariableSizeList\n        height={height}\n        width={width}\n        itemData={itemData}\n        itemSize={this.getItemSize}\n        itemCount={this.rows.length}\n        ref={(node) => { this.list = node }}\n      >\n        {Row}\n      </VariableSizeList>\n    )\n  }\n}\n"],"names":["Row","memo","data","index","style","rows","images","renderItem","itemsBelowIndex","filter","_","i","map","row","contents","length","reduce","a","b","rowHeight","content","image","areEqual","minimumRowHeight","maximumRowHeight","DreamGrid","props","unscaledContents","scaleDueToHeight","width","size","scaledContents","factor","factorToFitInMinimumRowHeight","unscaledDimension","scaleDimension","remainingWhitespace","scaledContent","dimension","x","scale","cur","prev","makeNextRow","remainingDimensions","remainingRowWidth","accumulatedRowDimensions","widthAtMinimumRowHeight","push","shift","widthsAtMinimumHeight","d","totalWidthAtMinimumHeight","widthScaleFactor","Math","min","makeRows","accumulatedRows","dimensions","next","remaining","concat","y","getImageDimensions","height","image_orientation","makeDimensions","getItemSize","list","createRef","prevProps","resetAfterIndex","imageDimensions","itemData","node","Component","propTypes","PropTypes","number","objectOf","object","func"],"mappings":"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"}