{"version":3,"sources":["DreamGrid/index.js","images.js","DreamGrid/Row.js","HomePage.js","DreamGridRowItem.js","ResponsiveGrid.js","dictionary.js","StaticGrid.js","Layout.js","App.js","index.js"],"names":["minimumRowHeight","maximumRowHeight","src_images","allIds","byId","0","id","height","width","url","1","2","3","4","5","6","7","8","9","10","memo","_ref","data","index","style","rows","images","renderItem","react_default","a","createElement","key","contents","length","Object","objectSpread","rowHeight","map","content","i","image","dimension","areEqual","DreamGrid","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","x","y","scaleDimension","scale","row","unscaledContents","scaleDueToHeight","size","scaledContents","unscaledDimension","factor","factorToFitInMinimumRowHeight","remainingWhitespace","scaledContent","reduce","cur","prev","horizontalWhitespace","makeNextRow","remainingDimensions","remainingRowWidth","accumulatedRowDimensions","widthAtMinimumRowHeight","push","shift","totalWidthAtMinimumHeight","d","b","widthScaleFactor","Math","min","next","remaining","makeRows","accumulatedRows","dimensions","_this$makeNextRow","concat","getImageDimensions","image_orientation","makeDimensions","filter","_images$byId$id","_this$getImageDimensi","getItemSize","list","createRef","prevProps","_this$props$size","resetAfterIndex","_this2","_this$props","imageDimensions","itemData","dist_index_esm","itemSize","itemCount","ref","node","Row","Component","mainStyles","display","flexDirection","leftStyles","rightStyles","overflowY","require","HomePage","animation","state","clearInterval","setInterval","setState","sizeDown","_this3","sizeUp","react_router_dom","to","className","index_esm","sizes","DreamGrid_DreamGrid","alt","src","padding","ResponsiveGrid","react","lib_default","component","StaticGrid","alignItems","justifyContent","flex","Layout","react_router","exact","path","App","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.09ec6f20.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport { VariableSizeList } from 'react-window';\nimport Row from './Row';\n\nlet minimumRowHeight, maximumRowHeight;\n\nexport default class DreamGrid extends Component {\n\n  constructor(props) {\n    super(props);\n    minimumRowHeight = props.minimumRowHeight;\n    maximumRowHeight = props.maximumRowHeight;\n    this.list = createRef();\n  }\n  //\n  // componentDidMount() {\n  //   console.log(this.list);\n  //     this.list.scrollToItem(this.rows.length+1);\n  // }\n\n  componentDidUpdate(prevProps) {\n    const { height, width } = this.props.size;\n    if (prevProps.height !== height || prevProps.width !== width) {\n      this.list.resetAfterIndex(0, true);\n    }\n  }\n\n  dimension = (id, x, y) => {\n    return {id, x, y };\n  }\n\n  scaleDimension = (dimension, scale) => {\n    return {\n    \tdimension: dimension,\n      scale: scale\n    };\n  }\n\n  row = (unscaledContents, scaleDueToHeight) => {\n    const width = this.props.size.width;\n  \tconst scaledContents = unscaledContents.map(unscaledDimension => {\n    \tconst factor = this.factorToFitInMinimumRowHeight(unscaledDimension) * scaleDueToHeight;\n      return this.scaleDimension(unscaledDimension, factor);\n    })\n\n    const remainingWhitespace = width - scaledContents\n      .map(scaledContent => scaledContent.dimension.x * scaledContent.scale)\n      .reduce(( cur, prev ) => { return cur + prev; }, 0);\n\n  \treturn {\n    \tcontents: scaledContents,\n      rowHeight: minimumRowHeight * scaleDueToHeight,\n      horizontalWhitespace: remainingWhitespace\n    }\n  }\n\n  makeNextRow = (remainingDimensions) => {\n    const width = this.props.size.width;\n  \tlet remainingRowWidth = width;\n    let accumulatedRowDimensions = [];\n    while (remainingDimensions.length > 0 && remainingRowWidth > this.widthAtMinimumRowHeight(remainingDimensions[0])) {\n      remainingRowWidth -= this.widthAtMinimumRowHeight(remainingDimensions[0]);\n    \taccumulatedRowDimensions.push(remainingDimensions.shift());\n    }\n\n    const widthsAtMinimumHeight = accumulatedRowDimensions.map(d => this.widthAtMinimumRowHeight(d));\n    const totalWidthAtMinimumHeight = widthsAtMinimumHeight.reduce((a, b) => { return a + b; }, 0);\n    const widthScaleFactor = Math.min(width / totalWidthAtMinimumHeight, maximumRowHeight / minimumRowHeight);\n    return {\n      next: this.row(accumulatedRowDimensions, widthScaleFactor),\n      remaining: remainingDimensions\n    };\n  }\n\n  makeRows = (accumulatedRows, dimensions) => {\n    const { next, remaining } = this.makeNextRow(dimensions);\n    accumulatedRows.push(next);\n    if (remaining.length > 0) {\n    \taccumulatedRows.concat(this.makeRows(accumulatedRows, remaining))\n    }\n    return accumulatedRows;\n  }\n\n  widthAtMinimumRowHeight = (dimension) => {\n  \treturn this.factorToFitInMinimumRowHeight(dimension) * dimension.x;\n  }\n\n  factorToFitInMinimumRowHeight = (dimension) => {\n  \treturn minimumRowHeight / dimension.y;\n  }\n\n  getImageDimensions = (id) => {\n    const { images } = this.props;\n    const image = images.byId[id];\n    const { width, height } = image;\n    switch(image.image_orientation) {\n      case 'LeftBottom':\n        return {\n          x: height,\n          y: width,\n        };\n      default:\n        return {\n          x: width,\n          y: height,\n        };\n      }\n  }\n\n  makeDimensions = () => {\n    const { images } = this.props;\n    return images.allIds.filter((id) => {\n      const { width, height } = images.byId[id];\n      return width && height;\n    }).map((id) => {\n      const { x, y } = this.getImageDimensions(id);\n      return this.dimension(id, x, y);\n    })\n  }\n\n  getItemSize = index => {\n    return this.rows[index].rowHeight;\n  };\n\n  render() {\n    const { images, size, renderItem } = this.props;\n    const { height, width } = size;\n    const imageDimensions = this.makeDimensions();\n    this.rows = this.makeRows([], imageDimensions);\n    const itemData = { rows: this.rows, images, renderItem };\n    return (\n      <VariableSizeList\n        height={height}\n        width={width}\n        itemData={itemData}\n        itemSize={this.getItemSize}\n        itemCount={this.rows.length}\n        ref={(node) => { return this.list = node; }}\n      >\n        {Row}\n      </VariableSizeList>\n    );\n  }\n}\n","export default {\n  allIds: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],\n  byId: {\n    0: { id: 0, height: 679, width: 1024, url: 'https://live.staticflickr.com/7837/46852208034_1f768a633c_b_d.jpg' },\n    1: { id: 1, height: 1024, width: 679, url: 'https://live.staticflickr.com/7856/46660570565_dd7cb62cd0_b_d.jpg' },\n    2: { id: 2, height: 1024, width: 679, url: 'https://live.staticflickr.com/7820/40609973763_12f1b6b419_b_d.jpg' },\n    3: { id: 3, height: 679, width: 1024, url: 'https://live.staticflickr.com/7835/32633607057_5bc8364604_b_d.jpg' },\n    4: { id: 4, height: 679, width: 1024, url: 'https://live.staticflickr.com/7846/47576131171_19e5a0bdbc_b_d.jpg' },\n    5: { id: 5, height: 1024, width: 679, url: 'https://live.staticflickr.com/7908/32633606977_16e48d70df_b_d.jpg' },\n    6: { id: 6, height: 679, width: 1024, url: 'https://live.staticflickr.com/7827/40609972083_827edcf11d_b_d.jpg' },\n    7: { id: 7, height: 679, width: 1024, url: 'https://live.staticflickr.com/7819/32633607187_23a906a20d_b_d.jpg' },\n    8: { id: 8, height: 679, width: 1024, url: 'https://live.staticflickr.com/7866/33699205638_4fd36c940c_b_d.jpg' },\n    9: { id: 9, height: 1024, width: 679, url: 'https://live.staticflickr.com/7903/32633606767_1cda0b9f60_b_d.jpg' },\n    10: { id: 10, height: 679, width: 1024, url: 'https://live.staticflickr.com/7922/40609973373_e585031e3e_b_d.jpg' },\n  }\n};\n","import React, { memo } from 'react';\nimport { areEqual } from 'react-window';\n\nexport default memo(({ data, index, style }) => {\n  const { rows, images, renderItem } = data;\n  return (\n    <div\n      key={index + rows[index].contents.length}\n      style={{\n        ...style,\n        height: rows[index].rowHeight,\n      }}\n    >\n      {\n        rows[index].contents.map((content, i) => {\n          const image = images.byId[content.dimension.id];\n          return renderItem(data, content, index + i, image);\n        })\n      }\n    </div>\n  );\n}, areEqual);\n","import React, { Component } from 'react';\nimport ReactVirtualizedAutoSizer from 'react-virtualized-auto-sizer';\nimport { Link } from 'react-router-dom';\nimport images from './images.js';\nimport DreamGrid from './DreamGrid';\n\nconst mainStyles = {\n  display: 'flex',\n  flexDirection: 'row',\n  height: '100%',\n};\n\nconst leftStyles = {\n  height: '100%',\n  width: 200,\n};\n\nconst rightStyles = {\n  height: '100%',\n  width: '100%',\n  overflowY: 'auto',\n};\n// import { staticGrid, responsiveGrid } from './dictionary.js';\n// import PrismCode from 'react-prism';\nrequire('prismjs');\nrequire('prismjs/themes/prism.css');\n\n\nexport default class HomePage extends Component {\n\n  constructor(props) {\n      super(props);\n      this.animation = {}\n      this.state = {\n        size: {\n          height: 400,\n          width: 600\n        }\n      };\n  }\n\n  sizeUp() {\n    clearInterval(this.animation);\n    this.animation = setInterval(() => this.setState((state, props) => {\n      return state.size.width <= 600 ? {\n        size: {\n          height: state.size.height,\n          width: state.size.width + 25\n        }\n      } : this.sizeDown()\n    }), 500);\n  }\n\n  sizeDown() {\n    clearInterval(this.animation);\n    this.animation = setInterval(() => this.setState((state, props) => {\n      return state.size.width >= 300 ? {\n        size: {\n          height: state.size.height,\n          width: state.size.width - 25\n        }\n      } : this.sizeUp()\n    }), 500);\n  }\n\n  // componentDidMount() {\n  //   this.sizeDown()\n  //\n  // }\n\n  componentWillUnmount() {\n    clearInterval(this.animation);\n  }\n\n  render() {\n    return (\n      <main style={mainStyles}>\n        <section style={leftStyles}>\n          <h1><Link to=\"/\">DreamGrid</Link> • <Link to=\"/docs\">Docs</Link></h1>\n          <p>\n            <i>The ideal image grid component</i>\n          </p>\n          <ol>\n            <li>deterministic</li>\n            <li>responsive</li>\n            <li>respects image aspect ratios</li>\n          </ol>\n          <h3>Examples</h3>\n          <Link to=\"/docs/responsive\">Responsive Grid</Link>\n          <br />\n          <Link to=\"/docs/static\">Static Grid</Link>\n        </section>\n        <section style={rightStyles}>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <h1>DreamGrid 0.1.0 Beta is here and it's 🔥.</h1>\n              <i>The ideal image grid component</i>\n            </header>\n            <br />\n            <div style={{ ...this.state.size }}>\n              <ReactVirtualizedAutoSizer>\n                {\n                  (sizes) => {\n                    return (\n                      <DreamGrid\n                        size={sizes}\n                        images={images}\n                        minimumRowHeight={180}\n                        maximumRowHeight={350}\n\n                        renderItem={(data, content, index, image) => {\n                          return (\n                            <img\n                                alt=\"\"\n                                src={image.url}\n                                style={{\n                                    padding: 'unset',\n                                    width: content.dimension.x * content.scale,\n                                    height: content.dimension.y * content.scale,\n                                    // TODO spead height and width behind the scenes\n                                }}\n                            />\n                          );\n                        }}\n                      />\n                    );\n                  }\n                }\n              </ReactVirtualizedAutoSizer>\n            </div>\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n","import React, { memo } from 'react';\nimport { areEqual } from 'react-window';\n\nexport default memo(({ data, content, index, image }) => {\n  return (\n    <img\n      key={index}\n      src={image.url}\n      style={{\n        width: content.dimension.x * content.scale,\n        height: content.dimension.y * content.scale,\n      }}\n    />\n  );\n}, areEqual);\n","import React, { Fragment } from 'react';\nimport ReactVirtualizedAutoSizer from 'react-virtualized-auto-sizer';\nimport { VariableSizeList } from 'react-window';\nimport images from './images.js';\nimport DreamGrid from './DreamGrid';\nimport RowItem from './DreamGridRowItem';\n\nimport { responsiveGrid } from './dictionary.js';\nimport PrismCode from 'react-prism';\nrequire('prismjs');\nrequire('prismjs/themes/prism.css');\n\nconst size = {\n  height: 400,\n  width: 600,\n};\n\n\nexport default () => {\n  return (\n    <Fragment>\n      <h5>Responsive Grid</h5>\n      <div style={{ ...size, width: '100%' }}>\n        <ReactVirtualizedAutoSizer>\n          {\n            (sizes) => {\n              return (\n                <DreamGrid\n                  size={sizes}\n                  images={images}\n                  minimumRowHeight={180}\n                  maximumRowHeight={350}\n                  renderItem={(data, content, index, image) => {\n                    return (\n                      <img\n                          alt=\"\"\n                          src={image.url}\n                          style={{\n                              padding: 'unset',\n                              width: content.dimension.x * content.scale,\n                              height: content.dimension.y * content.scale,\n                              // TODO spead height and width behind the scenes\n                          }}\n                      />\n                    );\n                  }}\n                />\n              );\n            }\n          }\n        </ReactVirtualizedAutoSizer>\n      </div>\n      <PrismCode component=\"pre\" className=\"language-javascript\">\n        {responsiveGrid}\n      </PrismCode>\n    </Fragment>\n  );\n}\n","export const staticGrid = `\n  import DreamGrid from 'DreamDrid';\n\n  const size = {\n    height: 300,\n    width: 600,\n  };\n\n  const App = () => {\n      return (\n        <DreamGrid\n          size={size}\n          images={images}\n          minimumRowHeight={180}\n          maximumRowHeight={350}\n          renderItem={(data, content, index, image) => {\n            return (\n              <img\n                  alt=\"\"\n                  src={image.url}\n                  style={{\n                      padding: 'unset',\n                      width: content.dimension.x * content.scale,\n                      height: content.dimension.y * content.scale,\n                      // TODO spead height and width behind the scenes\n                  }}\n              />\n            );\n          }}\n        />\n      );\n    );\n  }\n\n`;\n\nexport const responsiveGrid = `\n  import DreamGrid from 'DreamDrid';\n  import ReactVirtualizedAutoSizer from 'react-virtualized-auto-sizer';\n\n  const renderItem = (data, content, index, image) => { // has these arguments\n    return (\n      <img\n          alt=\"\"\n          src={image.url}\n          style={{\n              width: content.dimension.x * content.scale,\n              height: content.dimension.y * content.scale,\n          }}\n      />\n    );\n  };\n\n  const App = () => {\n    return (\n      <ReactVirtualizedAutoSizer>\n        {\n          (sizes) => {\n            return (\n              <DreamGrid\n                size={sizes}\n                images={images}\n                minimumRowHeight={180}\n                maximumRowHeight={350}\n                renderItem={(data, content, index, image) => {\n                  return (\n                    <img\n                        alt=\"\"\n                        src={image.url}\n                        style={{\n                            padding: 'unset',\n                            width: content.dimension.x * content.scale,\n                            height: content.dimension.y * content.scale,\n                            // TODO spead height and width behind the scenes\n                        }}\n                    />\n                  );\n                }}\n              />\n            );\n          }\n        }\n      </ReactVirtualizedAutoSizer>\n    );\n  }\n`;\n","import React, { Fragment } from 'react';\nimport images from './images.js';\nimport DreamGrid from './DreamGrid';\nimport { staticGrid } from './dictionary.js';\nimport PrismCode from 'react-prism';\nrequire('prismjs');\nrequire('prismjs/themes/prism.css');\n\nconst size = { height: 500, width: 400 };\n\n\nexport default () => {\n  return (\n    <Fragment>\n      <h5>Static Grid</h5>\n      <section style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <div style={{ ...size, display: 'flex', flex: 1 }}>\n          <DreamGrid\n            size={size}\n            images={images}\n            minimumRowHeight={180}\n            maximumRowHeight={350}\n            renderItem={(data, content, index, image) => {\n              return (\n                <img\n                    alt=\"\"\n                    src={image.url}\n                    style={{\n                        padding: 'unset',\n                        width: content.dimension.x * content.scale,\n                        height: content.dimension.y * content.scale,\n                        // TODO spead height and width behind the scenes\n                    }}\n                />\n              );\n            }}\n          />\n        </div>\n        <div style={{ height: size.height, display: 'flex', flex: 1 }}>\n          <PrismCode component=\"pre\" className=\"language-javascript\">\n            {staticGrid}\n          </PrismCode>\n        </div>\n      </section>\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport ResponsiveGrid from './ResponsiveGrid.js';\nimport StaticGrid from './StaticGrid.js';\n\nconst mainStyles = {\n  display: 'flex',\n  flexDirection: 'row',\n  height: '100%',\n};\n\nconst leftStyles = {\n  height: '100%',\n  width: 200,\n};\n\nconst rightStyles = {\n  height: '100%',\n  width: '100%',\n  overflowY: 'auto',\n};\n\nexport default (props) => {\n  return (\n    <main style={mainStyles}>\n      <section style={leftStyles}>\n        <h1><Link to=\"/\">DreamGrid</Link> • <Link to=\"/docs\">Docs</Link></h1>\n        <h3>Examples</h3>\n        <Link to=\"/docs/responsive\">Responsive Grid</Link>\n        <br />\n        <Link to=\"/docs/static\">Static Grid</Link>\n      </section>\n      <section style={rightStyles}>\n        <Switch>\n          <Route\n            exact\n            path=\"/docs/static\"\n            component={StaticGrid}\n          />\n          <Route\n            exact\n            path={[\"/docs\", \"/docs/responsive\"]}\n            component={ResponsiveGrid}\n          />\n        </Switch>\n      </section>\n    </main>\n  );\n}\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport HomePage from './HomePage.js';\nimport Layout from './Layout.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Route\n          exact\n          path=\"/\"\n          component={HomePage}\n        />\n        <Route\n          path=\"/docs\"\n          component={Layout}\n        />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}